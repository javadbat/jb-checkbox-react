System.register(['react', 'mobx-react'], function (exports, module) {
    'use strict';
    var React, observer;
    return {
        setters: [function (module) {
            React = module.default;
        }, function (module) {
            observer = module.observer;
        }],
        execute: function () {

            function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
            function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
            function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }
            var JBCheckBoxService =
            function () {
              function JBCheckBoxService(props) {
                _classCallCheck(this, JBCheckBoxService);
                this.JBCheckBoxComponentDom = null;
                this.value = null;
                this.value = props.value;
                this.onChange = props.onChange;
              }
              _createClass(JBCheckBoxService, [{
                key: "onClick",
                value: function onClick() {
                  var _this = this;
                  var value = !this.value;
                  var event = new CustomEvent("change", {
                    detail: {
                      oldValue: this.value,
                      newValue: value
                    },
                    bubbles: true,
                    cancelable: true
                  });
                  event.simulated = true;
                  var tracker = this.JBCheckBoxComponentDom._valueTracker;
                  if (tracker) {
                    tracker.setValue(value);
                  }
                  this.JBCheckBoxComponentDom.value = value;
                  this.JBCheckBoxComponentDom.onchange = function (e) {
                    return _this.onChange(e);
                  };
                  this.JBCheckBoxComponentDom.dispatchEvent(event);
                }
              }]);
              return JBCheckBoxService;
            }();

            function styleInject(css, ref) {
              if ( ref === void 0 ) ref = {};
              var insertAt = ref.insertAt;
              if (!css || typeof document === 'undefined') { return; }
              var head = document.head || document.getElementsByTagName('head')[0];
              var style = document.createElement('style');
              style.type = 'text/css';
              if (insertAt === 'top') {
                if (head.firstChild) {
                  head.insertBefore(style, head.firstChild);
                } else {
                  head.appendChild(style);
                }
              } else {
                head.appendChild(style);
              }
              if (style.styleSheet) {
                style.styleSheet.cssText = css;
              } else {
                style.appendChild(document.createTextNode(css));
              }
            }

            var css = ".jb-check-box-component-wrapper{display:flex;flex-direction:row;align-items:center;justify-content:start}.jb-check-box-component-wrapper .caption{display:inline-block;padding:0 0 0 8px;font-weight:400;color:#535353;transition:all 0.3s ease-in-out}.jb-check-box-component-wrapper .caption.active{transition:all 0.3s ease-in-out;font-weight:700}.jb-check-box-component-wrapper .svg-wrapper{width:30px;height:30px;margin-left:8px}.jb-check-box-component-wrapper .svg-wrapper .check-box-svg{width:30px;height:30px;cursor:pointer}.jb-check-box-component-wrapper .svg-wrapper .check-box-svg.active .checkmark__cube{fill:#00dc55;transition:all 0.3s ease-in-out;rx:58;ry:58;stroke:transparent}.jb-check-box-component-wrapper .svg-wrapper .check-box-svg.active .checkmark__check{animation:stroke 0.3s cubic-bezier(0.65, 0, 0.45, 1) 0.1s forwards}.jb-check-box-component-wrapper .svg-wrapper .check-box-svg .checkmark__cube{fill:#fff;transition:all 0.3s ease-in-out;stroke:#808080;stroke-width:1px}.jb-check-box-component-wrapper .svg-wrapper .check-box-svg .checkmark__check{stroke-width:5;stroke:#fff;transform-origin:50% 50%;stroke-dasharray:48;stroke-dashoffset:48}@keyframes stroke{100%{stroke-dashoffset:0}}\n";
            styleInject(css);

            var _class;
            function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }
            function _classCallCheck$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
            function _defineProperties$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }
            function _createClass$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1(Constructor, staticProps); return Constructor; }
            function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }
            function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
            function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
            function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }
            function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
            var JBCheckBox = observer(_class =
            function (_React$Component) {
              _inherits(JBCheckBox, _React$Component);
              function JBCheckBox(props) {
                var _this;
                _classCallCheck$1(this, JBCheckBox);
                _this = _possibleConstructorReturn(this, _getPrototypeOf(JBCheckBox).call(this, props));
                _this.service = new JBCheckBoxService(props);
                return _this;
              }
              _createClass$1(JBCheckBox, [{
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps, prevStates) {
                  if (prevProps.value != this.props.value) {
                    this.service.value = this.props.value;
                  }
                }
              }, {
                key: "render",
                value: function render() {
                  var _this2 = this;
                  var renderDom = React.createElement("div", {
                    className: "jb-check-box-component-wrapper",
                    ref: function ref(dom) {
                      _this2.service.JBCheckBoxComponentDom = dom;
                    },
                    style: this.props.style
                  }, React.createElement("div", {
                    className: "svg-wrapper",
                    onClick: function onClick(e) {
                      return _this2.service.onClick(e);
                    }
                  }, React.createElement("svg", {
                    className: "check-box-svg " + (this.props.value ? 'active' : ''),
                    viewBox: "0 0 52 52"
                  }, React.createElement("defs", null, React.createElement("filter", {
                    xmlns: "http://www.w3.org/2000/svg",
                    id: "dropshadow",
                    height: "150%"
                  }, React.createElement("feGaussianBlur", {
                    in: "SourceAlpha",
                    stdDeviation: "7"
                  }), React.createElement("feOffset", {
                    dx: "0",
                    dy: "0",
                    result: "offsetblur"
                  }), React.createElement("feComponentTransfer", null, React.createElement("feFuncA", {
                    type: "linear",
                    slope: "0.9"
                  })), React.createElement("feMerge", null, React.createElement("feMergeNode", null), React.createElement("feMergeNode", {
                    in: "SourceGraphic"
                  })))), React.createElement("rect", {
                    className: "checkmark__cube",
                    x: "0",
                    y: "0",
                    width: "52",
                    height: "52",
                    rx: "5",
                    ry: "5"
                  }), React.createElement("path", {
                    className: "checkmark__check",
                    fill: "none",
                    d: "M14.1 27.2l7.1 7.2 16.7-16.8"
                  }))), React.createElement("div", {
                    className: "caption " + (this.props.value ? 'active' : '')
                  }, this.props.title ? this.props.title : ''));
                  return renderDom;
                }
              }]);
              return JBCheckBox;
            }(React.Component)) || _class;
            exports('default', JBCheckBox);

        }
    };
});
